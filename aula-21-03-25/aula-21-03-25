def elevar_quadrado(valor):
    return valor**2

#crie uma função que receba um nome e uma nota caso a nota seja maior ou igual a 6 retorne que o aluno foi aprovado e caso seja menor que o aluno foi reprovado """


def verificar_aprovacao(nota:float|int, 
                        nome:str = "Aluno Desconhecido")-> bool:
    """verifica a nota do aluno, 
    para saber se o mesmo foi aprovado

    Args:
        nota (float | int): nota do aluno
        nome (str, optional): nome do aluno. Defaults to "Aluno Desconhecido".

    Returns:
        bool: true se aluno qaprovado
    """
    if nota >= 6:
        print(f"o {nome} foi aprovado")
        return True
    else:
        print(f"o {nome} foi reprovado")
        return False


# def verificar_aprovacao2(nota, nome="Aluno Desconhecido"):
#     if nota >= 6:
#         print(f"o {nome} foi aprovado")
#         return True
#     print(f"o {nome} foi reprovado")
#     return False

# aluno = input("digite o nome: ")
# nota_do_aluno = float(input("digite a nota: "))
# verificar_aprovacao(aluno, nota_do_aluno)

#mais condensado e confuso
# verificar_aprovacao(input("digite o nome: "), 
#                     float(input("digite a nota: ")))

verificar_aprovacao(7.8, "Luiz")
verificar_aprovacao(5.4)

verificar_aprovacao(8.5,"walter")

""" façam uma função para calcular a media de alguns numeros"""

def calcular_media(n1, n2 ,n3):
    soma = n1+n2+n3
    return soma/3

def calcular_qualquer_media(*args):
    return sum(args)/len(args)

print(calcular_qualquer_media(1,2,3))
print(calcular_qualquer_media(7,14))
print(calcular_qualquer_media(50,78,51,78,312,65,98))

print("--TESTE1--", "--TESTE2--", "--TESTE3--",sep="||", end="_uwu_")
print("--TESTE1--", "--TESTE2--", "--TESTE3--",sep="||", end="_uwu_")
print("--TESTE1--", "--TESTE2--", "--TESTE3--",sep="||", end="_uwu_")

def gerar_lista_convidados(local, data, **kwargs):
    for cargo in kwargs:
        print(f"""Olá, {kwargs[cargo]}:
te convido a festa no local {local},
na data {data}
a onde voce será {cargo}
"""

def funcao_generica(param_pos_obg_1, param_pos_obg_n,#1,2,3,4
                    *param_pos_multi,#args
                    param_def_nomeados_1, param_def_nomeados_n,# nome=valor
                    **param_nomeados_multi):#kwargs
    pass



dica de estudo do Walter:
list comprehension
decorador
gerador



""")
        
print()
gerar_lista_convidados("minha casa", "daqui a pouco depois de nunca", churasqueiro="Maaaaath", garcon="birunda", bargirl="Marcele")


def funcao_calcular_media_qualquer_generica(**kwargs):
   if len(kwargs) == 0:
      return 0
   resultado = sum(kwargs)/len(kwargs)
   return resultado

https://dontpad.com/dfs6202103

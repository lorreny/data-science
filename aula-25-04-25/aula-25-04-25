
Repo de aulas:
https://github.com/thiagooshiro/python-classes

#Em Python, uma função é um bloco de código que realiza uma tarefa específica.
# A função pode receber parâmetros (valores de entrada) e retornar um valor ou realizar uma ação.

# Sintaxe básica para definir uma função:
# def nome_da_funcao(parâmetro1, parâmetro2):
#     # Bloco de código
#     resultado = parâmetro1 + parâmetro2
#     return resultado

# Definindo a função 'somar' que recebe dois parâmetros (a e b)
# e retorna a soma dos dois valores.
def somar(a, b):
    # A operação abaixo soma os valores passados como parâmetros.
    return a + b

# Chamando a função 'somar' com os argumentos 3 e 5
# A função irá retornar a soma de 3 + 5, que é 8.
resultado = somar(3, 5)

# Imprimindo o resultado da soma, que será 8
# A função 'print' exibe o valor retornado pela função 'somar'
print(resultado)  # Vai imprimir 8



Lista I - Fundamentos

# 1. Função de soma
# Crie uma função chamada 'soma' que recebe dois números como parâmetros e retorna a soma deles.
# A função deve aceitar dois números e retornar o resultado da soma entre eles.

# 2. Função de subtração
# Crie uma função chamada 'subtrair' que recebe dois números e retorna a diferença entre o primeiro e o segundo.
# A função deve retornar a subtração de 'b' de 'a', ou seja, a - b.

# 3. Função de multiplicação
# Crie uma função chamada 'multiplicar' que recebe dois números e retorna o produto deles.
# A função deve retornar o valor da multiplicação entre os dois números passados como parâmetros.

# 4. Função de divisão
# Crie uma função chamada 'dividir' que recebe dois números e retorna o quociente da divisão.
# A função deve realizar a divisão de 'a' por 'b', mas é importante verificar se o divisor 'b' é zero.
# Se for zero, a função deve retornar uma mensagem de erro ou um valor indicativo (ex: "Erro: Divisão por zero").

# 5. Função de número par ou ímpar
# Crie uma função chamada 'verificar_par' que recebe um número e retorna 'True' se o número for par,
# e 'False' caso contrário. A função pode usar o operador módulo (%) para verificar se o número é divisível por 2.

# 6. Função de maior número
# Crie uma função chamada 'maior_numero' que recebe três números e retorna o maior deles.
# A função deve comparar os três valores e retornar o maior deles.

# 7. Função de média
# Crie uma função chamada 'calcular_media' que recebe uma lista de números e retorna a média deles.
# A função deve somar todos os números da lista e dividir pelo total de elementos na lista.

# 8. Função de fatorial
# Crie uma função chamada 'fatorial' que recebe um número e retorna o fatorial desse número.
# O fatorial de um número 'n' é o produto de todos os números inteiros de 1 até 'n' (exemplo: fatorial de 4 é 4 * 3 * 2 * 1).

# 9. Função de contar caracteres
# Crie uma função chamada 'contar_caracteres' que recebe uma string e retorna o número de caracteres dessa string.
# A função pode usar a função embutida 'len()' para contar os caracteres da string.

# 10. Função de somar lista
# Crie uma função chamada 'somar_lista' que recebe uma lista de números e retorna a soma de todos os números dessa lista.
# A função pode iterar sobre a lista e somar os elementos ou utilizar a função 'sum()' para realizar a soma de maneira mais eficiente.


# Lista II - Intermediário:

## Para os exercícios com listas utilize como exemplo essas listas a seguir, você tem liberdade para criar suas próprias, mas sempre teste também com essas:
lista_1 = [-10, 5, -3, 7, 2, -1, 8, -4]
lista_2 = [0, -1, 6, -3, 9, -7, 4, -8]
lista_3 = [3, 9, -2, -5, 6, 0, -8, 7]
lista_4 = [10, 4, 55, 21, 7]
lista_5 = [15, 23, 8, 45, 12]
lista_6 = [1, 2, 3, 4, 5]


# 1. Verificar se um número é par ou ímpar
# Crie uma função chamada 'verificar_par_ou_impar' que recebe um número e retorna uma mensagem dizendo se ele é par ou ímpar.
# Utilize a função 'verificar_par' criada no exercício anterior para realizar essa verificação.
# A mensagem que a função deve retornar deve ser do tipo:
# "Esse número é par" se for par
# "Esse número é ímpar" se for ímpar

# 2. Verificar se um número é positivo ou negativo
# Crie uma função chamada 'verificar_negativo' que recebe um número e retorna True se o número for negativo e False se for positivo.
# Utilize essa função para verificar se um número é positivo ou negativo e exibir a mensagem apropriada.

# 3. Verificar se um número é primo
# Crie uma função chamada 'verificar_primo' que recebe um número e retorna True se o número for primo e False caso contrário.
# Lembre-se que um número primo é um número maior que 1 que só pode ser dividido por 1 e por ele mesmo.
# Teste a função com alguns números.

# 4. Calcular a média de uma lista de números
# Crie uma função chamada 'calcular_media' que recebe uma lista de números e retorna a média desses números.
# A média é calculada somando todos os números e dividindo pela quantidade de números na lista.

# 5. Contar quantos números são positivos em uma lista
# Crie uma função chamada 'contar_positivos' que recebe uma lista de números e retorna a quantidade de números positivos na lista.
# Utilize a função 'verificar_negativo' para contar os números positivos.

# 6. Verificar se um número é maior que a média de uma lista
# Crie uma função chamada 'verificar_maior_que_media' que recebe um número e uma lista de números e verifica se o número é maior que a média da lista.
# Utilize a função 'calcular_media' para calcular a média da lista.

# 7. Encontrar o menor número em uma lista
# Crie uma função chamada 'encontrar_menor' que recebe uma lista de números e retorna o menor número da lista.


# 8. Verificar se um número é par ou ímpar e imprimir a mensagem correta
# Crie uma função chamada 'verificar_par_ou_impar' que recebe um número e imprime:
# "Esse número é par" se o número for par,
# "Esse número é ímpar" se for ímpar,
# E se o número for primo, imprime "Esse número é primo".

# 9. Encontrar o maior número em uma lista
# Crie uma função chamada 'encontrar_maior' que recebe uma lista de números e retorna o maior número da lista.
# Lembre-se de comparar os números entre si para encontrar o maior valor.
# Teste a sua função com as seguintes listas:
# Lista 1: [10, 4, 55, 21, 7]
# Lista 2: [15, 23, 8, 45, 12]
# Lista 3: [1, 2, 3, 4, 5]
# A função deve retornar o maior número de cada lista.

# 10. Criar uma nova lista com os números positivos
# Crie uma função chamada 'filtrar_positivos' que recebe uma lista de números e retorna uma nova lista contendo apenas os números positivos.
# Utilize a função 'verificar_negativo' para filtrar os números positivos da lista.
# Teste a sua função com as seguintes listas:
# Lista 1: [-10, 5, -3, 7, 2, -1, 8, -4]
# Lista 2: [0, -1, 6, -3, 9, -7, 4, -8]
# Lista 3: [3, 9, -2, -5, 6, 0, -8, 7]


LISTA III - Avançado

11. Verificar a quantidade de números negativos em uma lista
Crie uma função chamada contar_negativos que recebe uma lista de números e retorna a quantidade de números negativos na lista. Utilize a função verificar_negativo para contar os números negativos.

12. Somar todos os números de uma lista
Crie uma função chamada somar_lista que recebe uma lista de números e retorna a soma de todos os números da lista.

13. Verificar se uma lista está ordenada em ordem crescente
Crie uma função chamada verificar_ordenada_crescente que recebe uma lista de números e retorna True se a lista estiver ordenada em ordem crescente, e False caso contrário.

14. Inverter uma lista
Crie uma função chamada inverter_lista que recebe uma lista e retorna a lista invertida (os elementos na ordem oposta).

15. Encontrar o segundo maior número de uma lista
Crie uma função chamada encontrar_segundo_maior que recebe uma lista de números e retorna o segundo maior número da lista.

16. Multiplicar todos os números de uma lista
Crie uma função chamada multiplicar_lista que recebe uma lista de números e retorna o produto de todos os números da lista.

17. Criar uma lista com os quadrados dos números
Crie uma função chamada quadrados_lista que recebe uma lista de números e retorna uma nova lista com os quadrados de cada número.

18. Verificar se uma lista contém um número específico
Crie uma função chamada verificar_numero_lista que recebe uma lista e um número e retorna True se o número estiver presente na lista, e False caso contrário.

19. Remover números negativos de uma lista
Crie uma função chamada remover_negativos que recebe uma lista de números e retorna uma nova lista sem os números negativos.

20. Contar a quantidade de ocorrências de um número em uma lista
Crie uma função chamada contar_ocorrencias que recebe uma lista e um número, e retorna a quantidade de vezes que esse número aparece na lista.

21. Adicionar 1 a todos os elementos de uma lista
Crie uma função chamada adicionar_um que recebe uma lista de números e retorna uma nova lista com todos os números aumentados em 1.

22. Verificar se duas listas são iguais
Crie uma função chamada listas_iguais que recebe duas listas e retorna True se as listas forem iguais, e False caso contrário.

23. Criar uma lista com os números ímpares de uma lista
Crie uma função chamada filtrar_impares que recebe uma lista de números e retorna uma nova lista contendo apenas os números ímpares da lista.

24. Calcular o fatorial de um número
Crie uma função chamada fatorial que recebe um número e retorna o fatorial desse número. (Por exemplo, o fatorial de 5 é 5 * 4 * 3 * 2 * 1).

25. Encontrar a mediana de uma lista
Crie uma função chamada mediana que recebe uma lista de números e retorna a mediana da lista. Se a lista tiver um número ímpar de elementos, a mediana é o valor do meio. Se for par, a mediana é a média dos dois valores centrais.

26. Criar uma lista com os números de uma lista multiplicados por 2
Crie uma função chamada multiplicar_por_dois que recebe uma lista de números e retorna uma nova lista com os números multiplicados por 2.

27. Verificar se uma lista contém números consecutivos
Crie uma função chamada verificar_consecutivos que recebe uma lista de números e retorna True se os números da lista são consecutivos, e False caso contrário.

28. Criar uma lista com a soma acumulada dos números
Crie uma função chamada soma_acumulada que recebe uma lista de números e retorna uma nova lista onde cada elemento é a soma dos números até aquele ponto. Exemplo: para a lista [1, 2, 3], a soma acumulada seria [1, 3, 6].

29. Encontrar os números que aparecem mais de uma vez em uma lista
Crie uma função chamada encontrar_repetidos que recebe uma lista e retorna uma nova lista com os números que aparecem mais de uma vez na lista.

30. Criar uma lista com os números da lista original elevados ao cubo
Crie uma função chamada cubos_lista que recebe uma lista de números e retorna uma nova lista com os números elevados ao cubo.

31. Ordenar uma lista em ordem decrescente
Crie uma função chamada ordenar_decrescente que recebe uma lista de números e retorna a lista ordenada em ordem decrescente.

32. Criar uma lista de tuplas com os números e seus quadrados
Crie uma função chamada tuplas_quadrados que recebe uma lista de números e retorna uma nova lista com tuplas, onde o primeiro elemento da tupla é o número e o segundo é seu quadrado.

33. Verificar se todos os números de uma lista são positivos
Crie uma função chamada todos_positivos que recebe uma lista de números e retorna True se todos os números forem positivos, e False caso contrário.

34. Criar uma lista com os elementos de duas listas intercalados
Crie uma função chamada intercalar_listas que recebe duas listas e retorna uma nova lista onde os elementos das duas listas estão intercalados. Exemplo: para as listas [1, 2, 3] e [4, 5, 6], o resultado será [1, 4, 2, 5, 3, 6].

35. Encontrar a soma de todos os números ímpares de uma lista
Crie uma função chamada soma_impares que recebe uma lista de números e retorna a soma de todos os números ímpares da lista.

36. Encontrar o índice do maior número de uma lista
Crie uma função chamada indice_maior que recebe uma lista de números e retorna o índice do maior número dessa lista.

37. Calcular a soma de todos os quadrados de uma lista
Crie uma função chamada soma_quadrados que recebe uma lista de números e retorna a soma de todos os quadrados desses números.

38. Criar uma lista de números em ordem crescente, mas sem números repetidos
Crie uma função chamada ordenar_sem_repetir que recebe uma lista de números e retorna a lista ordenada de forma crescente, sem números repetidos.

39. Verificar se um número está na sequência de Fibonacci
Crie uma função chamada verificar_fibonacci que recebe um número e retorna True se ele pertencer à sequência de Fibonacci, e False caso contrário.

40. Remover números ímpares de uma lista
Crie uma função chamada remover_impares que recebe uma lista de números e retorna uma nova lista sem os números ímpares.



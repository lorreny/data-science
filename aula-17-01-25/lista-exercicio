O que são Listas em Python?
Em Python, listas são uma estrutura de dados que permite armazenar vários itens em uma única variável. Uma lista pode conter elementos de diferentes tipos, como números, strings, ou até outras listas. As listas são mutáveis, ou seja, você pode alterar seus elementos depois que a lista for criada.

Criando Listas
Para criar uma lista em Python, você usa colchetes ([]), e os elementos da lista são separados por vírgulas.

Exemplo de listas:

amigos = ['Bruno', 'Amanda', 'Rodrigo', 'Júlio']
notas = [7.8, 9, 4.5]
fruta = 'morango'
Aqui temos:

amigos: uma lista de strings (nomes dos amigos).
notas: uma lista de números (notas de alunos).
fruta: uma string com o nome de uma fruta.
Acessando Elementos da Lista
Você pode acessar os elementos de uma lista usando um índice. Os índices começam em 0, ou seja, o primeiro item da lista tem índice 0, o segundo item tem índice 1, e assim por diante.


print(amigos[0]) # Bruno
No exemplo acima, amigos[0] retorna "Bruno", que é o primeiro elemento da lista.

Importante: Se você usar um índice negativo, o Python conta a partir do final da lista:

-1 refere-se ao último item,
-2 ao penúltimo, e assim por diante.
Exemplo:


print(amigos[-1]) # Júlio
Trabalhando com Strings e Listas
As strings também podem ser tratadas de maneira semelhante às listas, pois você pode acessar seus caracteres usando índices.

Exemplo:

print(fruta[0]) # 'm'
Aqui, fruta[0] retorna o primeiro caractere da string "morango", que é 'm'.

Modificando Listas
Você pode modificar uma lista após sua criação. Para isso, basta acessar o índice de um item e atribuir um novo valor a ele.

Exemplo:

amigos[1] = 'Fernanda'
print(amigos)  # ['Bruno', 'Fernanda', 'Rodrigo', 'Júlio']
Aqui, substituímos o segundo item da lista amigos, que era 'Amanda', por 'Fernanda'.

Adicionando e Removendo Elementos
Você pode adicionar novos elementos à lista com o método .append() ou .insert(), e pode remover elementos com .remove() ou .pop().

Exemplo:


amigos.append('Lucas')  # Adiciona 'Lucas' no final da lista
print(amigos)  # ['Bruno', 'Fernanda', 'Rodrigo', 'Júlio', 'Lucas']

amigos.remove('Rodrigo')  # Remove 'Rodrigo'
print(amigos)  # ['Bruno', 'Fernanda', 'Júlio', 'Lucas']
Exemplo de Algoritmo com Listas
Agora, vamos falar sobre o algoritmo que você mencionou, que recebe uma palavra e verifica se ela começa com uma vogal ou uma consoante. Esse exercício usa listas de forma bem simples, mas eficiente.

Código:
palavra = input('Digite uma palavra: ')
vogais = ['a', 'e', 'i', 'o', 'u']

# Verifica se o primeiro caractere da palavra é uma vogal
if palavra[0].lower() in vogais:
    print('Começa em vogal')
else:
    print('Não começa em vogal')
Explicação do Algoritmo:
Entrada de Dados:

O programa pede para o usuário digitar uma palavra através do comando input().
A palavra digitada é armazenada na variável palavra.
Lista de Vogais:

A lista vogais contém as vogais do alfabeto (['a', 'e', 'i', 'o', 'u']).
Verificação:

O programa verifica se o primeiro caractere da palavra (palavra[0]) é uma vogal.
Para garantir que a comparação seja feita de maneira case-insensitive (sem se importar se a letra está maiúscula ou minúscula), a função .lower() converte o caractere para minúsculo.
Em seguida, o comando if palavra[0].lower() in vogais: verifica se o primeiro caractere está dentro da lista vogais.
Resultado:

Se o primeiro caractere for uma vogal, o programa imprime "Começa em vogal".
Caso contrário, imprime "Não começa em vogal".
Exemplos de Entrada e Saída:
Entrada: "Ana" Saída: "Começa em vogal"

Entrada: "Pedro" Saída: "Não começa em vogal"

Conclusão
As listas em Python são uma ferramenta muito poderosa e versátil. Elas permitem armazenar múltiplos itens, sejam números, strings ou outros tipos, e permitem realizar operações como acessar, modificar e percorrer seus elementos. Com as listas, você pode construir algoritmos mais complexos e organizar dados de forma eficiente.


FOR 

# Estrutura sintática "for"
amigos = ['Bruno', 'Amanda', 'Rodrigo', 'Júlio']

for amigo in amigos:
    print(amigo.upper())


# Exercícios - Lógica de programação em Python

# Listas:

# 1: Crie um algoritmo que, ao declararmos uma lista com o nome de três amigos, imprima:
# o nome do primeiro amigo
# o nome do segundo amigo
# o nome do terceiro amigo



# 2: Dada a seguinte lista:
# animais = ["foca", "golfinho", "leão", "tartaruga"]
# Crie um algoritmo que imprima o primeiro e o último item da lista.


# 3: Crie uma lista que contenha um valor do tipo string, um valor do tipo real,
# um valor do tipo inteiro e um valor do tipo booleano
# imprima cada um desses valores separadamente.

# 4: Crie um algoritmo que lê uma lista contendo as notas bimestrais de um estudante e imprime 
# a média das notas desse estudante.


# 5: Dada a seguinte lista:
# produtos = ["aveia", "maçã", "uva", "abobora", "leite", "pão", "sabonete", "desodorante", "amaciante", "chuveiro"]
# Crie um algoritmo que ao receber essa lista imprima os itens que iniciam com a letra "a"


# 6: Dada a seguinte lista:
# produtos = ["aveia", "maçã", "uva", "abobora", "leite", "pão", "sabonete", "desodorante", "amaciante", "chuveiro"]
# Crie um algoritmo que ao receber essa lista imprima os itens que iniciam com a letra "a"


# 7: Crie um algoritmo que ao receber uma lista imprima todos os itens que contenham uma letra determinada por você.


# 8: Crie um algoritmo que ao receber uma lista númerica, imprima a multiplicação de cada um dos elementos da lista por 2.add()


# 9: Dada duas listas:
# nomes = "Bruna", "Felipe", "Jonathan", "Marcos", "Jéssica"
# sobrenomes = "Silva", "Oliveira", "Rocha", "Marques", "Amaral"
# Crie um algoritmo que imprima o nome completo de cada uma dessas pessoas;
# Essas listas são correspondentes, então a primeira pessoa é "Bruna" e seu sobrenome é "Silva".


# 10: Duda tem uma lista de amigos e uma lista de presentes que estes amigos gostariam de receber.
# ela fez a anotação na ordem, porém estão em listas separadas. A lista de amigos é:
# amigos: "Anna", "Pedro", "Ramon", "Gabriel", "Lucas", "Thiago" e "Val".
# A lista de presentes é:
# presentes_favoritos: "Livro", "Filme", "Passeio no restaurante", "Relógio", "Uma garrafa de cerveja artesanal", "Uma ida ao cinema" e "Um doguinho".
# Crie um algoritmo que imprima essas informações no seguinte formato:
# {nome do amigo}: {presente favorito}


# 11: Dada as seguintes listas:
# frutas = ["maçã", "banana", "limão", "abacate", "melancia"]
# animais = ["leão", "toupeira", "ganso" ,"macaco"]
# Crie um algoritmo que imprima os valores de cada um dos itens da lista de forma intercalada.


# 12: Crie um algoritmo que recebe as seguintes informações de três usuários: nome, idade, sexo
# E imprima ao final cada um dos usuários no seguinte formato:
# Nome: {nome}, Idade: {idade}, Sexo: {sexo}


# 13: Crie um algoritmo que recebe 7 números de um usuário e imprime uma lista em ordem crescente dos números fornecidos.add()

# 14: Imagine que estamos desenvolvendo uma aplicação para o gerenciamento de um estacionamento
# Uma das funcionalidades é a alocação correta de vagas, carros devem ir para vagas do tipo A, 
# Motos devem ir para vagas do tipo B, outros veículos devem ir para vagas do tipo C.
# Dada uma lista de veículos o algoritmo deve imprimir o nome do veículo com o tipo de vaga apropriada para tal, exemplo:
# "Fiat velhinho - Tipo A"


# 15: O sistema de gerenciamento de notas dos estudantes de uma escola sofreu um ataque
# agora as informações das notas de alunos de uma turma estão embaralhadas.
# Os alunos da turma são: Ana, Amanda, Carlos, Eduardo, Helena, Juliana, Viviane, Taysa, José e Victor
# A primeira nota pertence ao último aluno da lista, a segunda nota ao penúltimo aluno e assim por diante.
# As notas são: "8", "5.5", "7.4", "8.2", "9", "7.2", "6.8", "7", "8.4", "10"
# Crie um algoritmo que retorne o nome do aluno com a nota correta ao lado.



# Desafio - Uma interface de agendamento de viagens recebe as seguintes informações como demonstrado no exemplo abaixo:
# info = ["Lucas", "28", "Chile", True, "30/03/2024"]
# Faça as seguintes verificações: 
# A primeira informação não contém carater númérico.
# A segunda informação é um número.
# A terceira informação é composta por apenas uma palavra
# A quarta informação é um valor booleano
# A quinta informação não pode ser uma data que já passou.
# Caso todos os testes sejam positivos exiba a mensagem: "Viagem processada! Aguarde para impressão do ticket"
# Caso contrário imprima a mensagem: "Informações inválidas, repita o cadastro"
# Imagine que os usuários vão sempre entrar com as informações nos mais diveros formatos, teste cada um dos casos abaixo e elabore seus próprios casos:
# ex1 = ["1223", "10", "Brasil", False, "20/04/2026"]
# ex2 = ["Amanda", "24n", "França", True, "22/09/2025"]
# ex3 = ["Vitória", "33", "Marrocos", "True", "25/12/2024"]
# ex4 = ["Romero", "63", "Argentina", False, "17/03/2022" ]
# ex5 = ["matheus", "21", "Londres", True, "12/06/2024"]
# ex6 = ["JuLia", "31", "São Mateus", True, "23/04/2024"]
# ex7 = ["Venâncio", "50", "China", True, "22?05/2024"]
# ex8 = ["Maria", 23, "India", False, "07/12/2024"]
# ex9 = ["Pedro", "42", "Br4sil", True, "05/05/2024"]
# ex10 = ["Tom", 33, "Servolo", False, "02/05/1998"]



Exercícios LOOP FOR:


# Exercícios - Lógica de programação em Python

# Laços de Repetição

# 1 - Crie um algoritmo que receba um número e imprima no terminal todos os valores em ordem crescente até o valor do número informado.
# Ex: n = 5, a saída no terminal devera ser:
# 1
# 2
# 3
# 4
# 5



# 2 - Crie um algoritmo que receba um número e imprima no terminal todos os valores em ordem decrescente até o valor do número informado.
# Ex: n = 6, a saída no terminal devera ser:
# 6
# 5
# 4
# 3
# 2
# 1



# 3 - Crie um algoritmo que ao receber uma palavra conte o número de letras dessa palavra e imprima esse valor no terminal.



# 4 - Crie um algoritmo que recebe 5 nomes e imprime no terminal todos aqueles iniciados em uma letra à sua escolha:
# Ex: 'Ana', 'Julia', 'Pedro', 'Amanda' , letra = "A", a saída no terminal dever ser:
# Ana
# Amanda
# Obs: Se atentem para o uso de letras maiúsculas ou minúsculas


# 5 - Crie um algoritmo aque receba um número de usuário e informe a soma de todos os números anteriores ao valor informado:
# Ex: 3 , o resultado devera ser: 1 + 2 + 3 = 6 , então no terminal deverá ser exibido o número 6.


# 6 - Crie um algoritmo que ao receber uma palavra a reescreve de trás para frente.

# 7 - Crie um algoritmo que ao receber um número calcule a tabuada deste número até 10 e exiba cada uma das multiplicações no terminal
# Ex: numero = 3
# 3 x 1 = 3
# 3 x 2 = 6
# 3 x 3 = 9
# 3 x 4 = 12
# 3 x 5 = 15
# 3 x 6 = 18
# 3 x 7 = 21
# 3 x 8 = 24
# 3 x 9 = 27
# 3 x 10 = 30


# 7 - Crie um algoritmo que ao receber duas listas:
# cliente = ["João", "Daniel", "Larissa", "Mariana", "Julia", "Luana", "Gustavo", "Luiz"]
# produto = ["molho de tomate", "cenoura", "macarrão", "salame", "lâmpada", "água sanitária", "refrigerante", "suco"]
# Imprima os valores no seguinte formato:
# O cliente {cliente} comprou este produto: {produto}


# 8 - Crie um algoritmo que receba 7 nomes de usuário e ao final imprima cada um dos nomes em ordem alfabética.

# 9 - Crie um algoritmo para que o usuário possa selecionar uma das três opções: "pedra", "papel", "tesoura"
# imprima a opção escolhida pelo usuário.

# 10 - Crie um algoritmo que ao receber uma lista de números imprime o somatório dos números da lista.

# 11 - Crie um algoritmo que ao receber um nome imprime separadamente cada letra do nome.



